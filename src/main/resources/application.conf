akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  stdout-loglevel = DEBUG
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      unhandled = on
    }

    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = none
      "io.comiccloud.entity.EntityCommand" = kryo
      "io.comiccloud.entity.EntityEvent" = kryo
      "io.comiccloud.entity.EntityFieldsObject" = kryo
    }
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?CLUSTER_HOSTNAME}
      port = 2551
      port = ${?CLUSTER_PORT}
    }
  }

  cluster {
    roles = ["seed"]
    failure-detector {
      threshold = 12
      acceptable-heartbeat-pause = 10 s
    }
    seed-nodes = ["akka.tcp://default@127.0.0.1:2551"]
//    auto-down-unreachable-after = 10s
  }
}

mysql = {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    driver = com.mysql.cj.jdbc.Driver
    url = "jdbc:mysql://localhost/comic?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC"
    connectionTimeout = 3000
    validationTimeout = 1000
    connectionTestQuery = "/*ping*/ select 1"
    keepAliveConnection = true
    numThreads = 10
    numThreads = 5
    connectionTimeout = 30000
    maximumPoolSize = 26
    user = "root"
    password = "root"
    connectionPool = "HikariCP"
  }
}

# the max sharding actor numbers
maxShards = 100

service {
  http {
    interface = "0.0.0.0"
    port = 9000
  }

  authentication{
    access-token-life-in-seconds = 3600
  }
}