akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = INFO
  stdout-loglevel = INFO
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      unhandled = on
    }

    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = none
      "io.comiccloud.entity.EntityCommand" = kryo
      "io.comiccloud.entity.EntityFieldsObject" = kryo
    }
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    roles = ["seed"]
    failure-detector {
      threshold = 12
      acceptable-heartbeat-pause = 10 s
    }
    seed-nodes = [
       "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
     ]
    // auto-down-unreachable-after = 10s
  }
}

clustering {
 ip = "127.0.0.1"
 ip = ${?CLUSTER_IP}
 port = 1600
 port = ${?CLUSTER_PORT}
 seed-ip = "127.0.0.1"
 seed-ip = ${?CLUSTER_IP}
 seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
 seed-port = 1600
 seed-port = ${?SEED_PORT_1600_TCP_PORT}
 cluster.name = clustering-cluster
}

# the max sharding actor numbers
maxShards = 100

# cassandra
cassandra {
  contact-points = ["192.168.189.128"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  key-space = "comic"
  key-space = ${?CASSANDRA_KEYSPACE}
}

service {
  http {
    interface = "0.0.0.0"
    port = 9000
  }

  authentication{
    access-token-life-in-seconds = 3600
  }
}